package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class BOJ_3085 {

	private static char map[][];
	private static int N, max;
	private static class Cord{
		int r,c;
		public Cord(int r, int c) {
			this.r = r;
			this.c = c;
		}
	}
	private static void swap(Cord a, Cord b) {
		char aval = map[a.r][a.c];
		char bval = map[b.r][b.c];
		//둘의 값 swap 
		map[a.r][a.c] = bval;
		map[b.r][b.c] = aval;
		bruteforce();
		
		//탐색 끝난 후 다시 원상복귀
		map[a.r][a.c] = aval;
		map[b.r][b.c] = bval;
	}
	private static void bruteforce() {
		int cnt = 1;
		for(int i=0;i<N;i++) {
			cnt = 1;
			for(int j=0;j<N;j++) {
				if (i>=0 && i < N && j+1 >=0 && j+1 < N && map[i][j+1] == map[i][j]) {
					++cnt;
					max = Math.max(cnt, max);	
				}
				else
					cnt = 1;
			}
		}
		
		for(int i=0;i<N;i++) {
			cnt = 1;
			for (int j=0;j<N;j++) {
				if (j+1 >=0 && j+1 < N && i >=0 && i < N && map[j][i] == map[j+1][i]) {
					++cnt;
					max = Math.max(cnt, max);
				}
				else
					cnt = 1;
			}	
		}
	}
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		map = new char[N][N];
		max = 0;
		for(int i=0;i<N;i++) {
			map[i] = br.readLine().toCharArray();
		}
		
		//0,0 부터 시작해서 끝까지 탐색을 하므로 탐색 방향을 고려하면 r+1과 c+1만 살펴보면 됨 
		for(int i=0;i<N;i++) {
			for (int j=0;j<N;j++) {
				if (j+1 >= 0 && j+1 < N && i >=0 && i < N) { // c+1과 바꾸기
					swap(new Cord(i,j), new Cord(i,j+1));
				}
				
				if (i+1 >= 0 && i+1 < N && j >= 0 && j < N) {
					swap(new Cord(i,j), new Cord(i+1, j));
				}
			}
		}
		System.out.println(max);

	}

}
