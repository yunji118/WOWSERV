package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

public class BOJ_24480 {
	
//	private static boolean map[][];
	private static ArrayList<ArrayList<Integer>> map;
	private static int visited[];
	private static int N, M;
	private static int order;
	private static void dfs(int node) {
		for(int i=0;i<map.get(node).size();i++) {
			int next = map.get(node).get(i);
			if (visited[next] == 0) {
				visited[next] = order++; //depth 를 두면 안된다. depth로 두게 되면 깊게 들어갔다가  빠져 나왔을 경우 다시 리셋되므로. 
//				map.get(node).remove(i); 이러면 안됨. 1개씩 땡겨지니까 
				dfs(next);
			}
		}
	}
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());  //정점의 수 
		M = Integer.parseInt(st.nextToken());  //간선의 수 
		int start = Integer.parseInt(st.nextToken()); //시작 정점 
//		map = new boolean[N+1][N+1];
		map = new ArrayList<>();
		for(int i=0;i<=N;i++) {
			map.add(new ArrayList<>());
		}
		
		visited = new int [N+1];
		order = 1;
		
		for(int i=0;i<M;i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			
			map.get(a).add(b);
			map.get(b).add(a);
		}
		
		// 정렬
		for(int i=0;i<=N;i++) {
			Collections.sort(map.get(i));
			Collections.reverse(map.get(i));
		}
		
		visited[start] = order++;
		dfs(start);
		
		for(int i=1;i<=N;i++) {
			System.out.println(visited[i]);
		}

	}

}
